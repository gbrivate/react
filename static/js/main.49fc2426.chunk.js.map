{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CardList","props","react_default","a","createElement","profiles","map","profile","App_Card","key","id","Card","className","src","avatar_url","name","company","UserName","_useState","useState","_useState2","Object","slicedToArray","userName","setUserName","useEffect","reset","onChange","type","value","event","target","placeholder","autoFocus","required","Form","_useState3","_useState4","_useState5","_useState6","setReset","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","resp","wrap","_context","prev","next","preventDefault","url","concat","axios","get","sent","onSubmit","data","stop","_x","apply","this","arguments","App_UserName","onClick","cleanList","App","_useState7","_useState8","setProfiles","title","App_Form","newData","toConsumableArray","App_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49fc2426.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nconst CardList = props => (\n    <div> {props.profiles.map(profile =>\n        <Card key={profile.id} profile={profile}/>)}\n        {/* or using spread => <Card key={profile.id} {...profile}/>)}*/}\n    </div>\n);\n\nconst Card = props => {\n    const profile = props.profile;\n    return (\n        <div className=\"github-profile\">\n            <img src={profile.avatar_url}/>\n            <div className=\"info\">\n                <div className=\"name\">{profile.name}</div>\n                <div className=\"company\">{profile.company}</div>\n            </div>\n        </div>\n    );\n}\n\nconst UserName = props => {\n    const [userName, setUserName] = useState('');\n\n    useEffect(() => {\n        if (props.reset) {\n            setUserName('');\n            props.onChange('');\n        } else {\n            props.onChange(userName);\n        }\n    });\n\n    return (\n        <input\n            type=\"text\"\n            value={userName}\n            onChange={event => setUserName(event.target.value)}\n            placeholder=\"GitHub username\"\n            autoFocus\n            required\n        />\n    )\n}\n\n\nconst Fetch = url => {\n    return axios.get(url);\n};\n\nconst Form = props => {\n\n    const [userName, setUserName] = useState('');\n    const [reset, setReset] = useState(false);\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const resp = await Fetch(`https://api.github.com/users/${userName}`);\n        setReset(true);\n        props.onSubmit(resp.data);\n        setReset(false);\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <UserName onChange={setUserName} reset={reset}/>\n            <button>Add card</button>\n            <button onClick={props.cleanList} type={'button'}>Reset</button>\n        </form>\n    );\n}\n\nconst App = props => {\n    const [profiles, setProfiles] = useState([]);\n\n    const addNewProfile = (newData) => {\n        setProfiles([...profiles, newData]);\n    };\n\n    const cleanList = () => {\n      setProfiles([]);\n    };\n\n\n    return (\n        <div>\n            <div className=\"header\">{props.title}</div>\n            <Form onSubmit={addNewProfile} cleanList={cleanList}/>\n            <CardList profiles={profiles}/>\n        </div>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App title=\"The GitHub Cards App\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}